<?php
class MySQL extends mysqli
{
    private $args = "",
            $prepped = "",
            $errorText = "";
     /*  Function to control what is being inputted to the Database.
     *  For avoiding unwanted injection attempts by outsiders. You should always
     *  use this on user inputs from outside, unless using prepared statements
     */
    
    public function __construct($a, $b, $c, $d, $errorText="")
    {
        $this->errorText = $errorText;
        parent::__construct($a, $b, $c, $d);
    }
    
    public function setErrorText($text)
    {
        $this->errorText = $text;
    }
    
    public function queryWithExceptions ($sql, $explanation="", $useException = 1) {
        if(!$returned = $this->query($sql)) {
            if($useException === 1) {
                throw new Exception("SQL-error, generated by queryWithExceptions-function in KIRJASTODB-class ".PHP_EOL." Error explanation:,".$explanation.PHP_EOL." Error from queryWithExceptions-function in KIRJASTODB-class. The exact query in question: ".$sql.PHP_EOL." debug_backtrace: ".debug_backtrace());
            } else {
                return FALSE;
            }
        }
        return $returned;
    }
    public function prepareAndExec ($sql, $types, array $args) {
        $this->args = $args;
    }        

    public function execAnother ($args=NULL) {
        if($args===NULL) {
            $args = $this->args;
        }

        for($i=1; $args[$i]; $i++) {
            $this->prepped->bind_param($i, $args[$i]);
        }
        
        if($this->prepped->execute()) {
            return TRUE;
        }
        else {
            return FALSE;
        }
    }
    public function filterVariable($value)
    {
        if(empty($value))
            return "";
        // Stripslashes
        if (get_magic_quotes_gpc()) {
            $value = stripslashes($value);
        }
        if($value == '') {
            $value = 'NULL';
        } elseif (is_string($value) || is_numeric($value) || is_bool($value) || $value[0] == '0') {
            $value = $this->real_escape_string($value);
        } else { // If there is problem with the value, we have to cause an error for this, otherwise it's hard ro debug!
            var_dump(debug_backtrace());
            throw new Exception("Problem in KIRJASTODB. real_escape_string should get string-parameter, something else was given (type:".gettype($value)."). Value on top of this". print_r($value));
        }
        return $value;
    }
}
?>
